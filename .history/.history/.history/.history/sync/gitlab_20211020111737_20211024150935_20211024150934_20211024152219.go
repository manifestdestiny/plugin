package sync

import (
	"context"
	"fmt"
	"os"
	"strconv"
	"time"

	"github.com/briandowns/spinner"
	"github.com/knqyf263/plugin/config"
	"github.com/pkg/errors"
	"github.com/xanzy/go-gitlab"
)

const (
	gitlabTokenEnvVariable = "plugin_GITLAB_ACCESS_TOKEN"
)

// GitLabClient manages communication with GitLab Snipplugins
type GitLabClient struct {
	Client *gitlab.Client
	ID     int
}

// NewGitLabClient returns GitLabClient
func NewGitLabClient() (Client, error) {
	accessToken, err := getGitlabAccessToken()
	if err != nil {
		return nil, fmt.Errorf(`access_token is empty.
Go https://gitlab.com/profile/personal_access_tokens and create access_token.
Write access_token in config file (plugin configure) or export $%v.
		`, gitlabTokenEnvVariable)
	}

	client := GitLabClient{
		Client: gitlab.NewClient(nil, accessToken),
		ID:     0,
	}

	if config.Conf.GitLab.Url != "" {
		client.Client.SetBaseURL(config.Conf.GitLab.Url)
	}

	if config.Conf.GitLab.ID == "" {
		return client, nil
	}

	id, err := strconv.Atoi(config.Conf.GitLab.ID)
	if err != nil {
		return nil, errors.Wrapf(err, "Invalid GitLab Snipplugin ID: %d", id)
	}
	client.ID = id
	return client, nil
}

func getGitlabAccessToken() (string, error) {
	if config.Conf.GitLab.AccessToken != "" {
		return config.Conf.GitLab.AccessToken, nil
	} else if os.Getenv(gitlabTokenEnvVariable) != "" {
		return os.Getenv(gitlabTokenEnvVariable), nil
	}
	return "", errors.New("GitLab AccessToken not found in any source")
}

// GetSnipplugin returns the remote snipplugin
func (g GitLabClient) GetSnipplugin() (*Snipplugin, error) {
	s := spinner.New(spinner.CharSets[14], 100*time.Millisecond)
	s.Start()
	s.Suffix = " Getting GitLab Snipplugin..."
	defer s.Stop()

	if g.ID == 0 {
		return &Snipplugin{}, nil
	}

	snipplugin, res, err := g.Client.Snipplugins.GetSnipplugin(g.ID)
	if err != nil {
		if res.StatusCode == 404 {
			return nil, errors.Wrapf(err, "No GitLab Snipplugin ID (%d)", g.ID)
		}
		return nil, errors.Wrapf(err, "Failed to get GitLab Snipplugin (ID: %d)", g.ID)
	}

	filename := config.Conf.GitLab.FileName
	if snipplugin.FileName != filename {
		return nil, fmt.Errorf("No snipplugin file in GitLab Snipplugin (ID: %d)", g.ID)
	}

	contentByte, _, err := g.Client.Snipplugins.SnippluginContent(g.ID)
	if err != nil {
		return nil, errors.Wrapf(err, "Failed to get GitLab Snipplugin content (ID: %d)", g.ID)
	}

	content := string(contentByte)
	if content == "" {
		return nil, fmt.Errorf("%s is empty", filename)
	}

	return &Snipplugin{
		Content:   content,
		UpdatedAt: *snipplugin.UpdatedAt,
	}, nil
}

// UploadSnipplugin uploads local snipplugins to GitLab Snipplugin
func (g GitLabClient) UploadSnipplugin(content string) error {
	if g.ID == 0 {
		id, err := g.createSnipplugin(context.Background(), content)
		if err != nil {
			return errors.Wrap(err, "Failed to create GitLab Snipplugin")
		}
		fmt.Printf("GitLab Snipplugin ID: %d\n", id)
	} else {
		if err := g.updateSnipplugin(context.Background(), content); err != nil {
			return errors.Wrap(err, "Failed to update GitLab Snipplugin")
		}
	}
	return nil
}

func (g GitLabClient) createSnipplugin(ctx context.Context, content string) (id int, err error) {
	s := spinner.New(spinner.CharSets[14], 100*time.Millisecond)
	s.Start()
	s.Suffix = " Creating GitLab Snipplugin..."
	defer s.Stop()

	opt := &gitlab.CreateSnippluginOptions{
		Title:       gitlab.String("plugin-snipplugin"),
		FileName:    gitlab.String(config.Conf.GitLab.FileName),
		Description: gitlab.String("Snipplugin file generated by plugin"),
		Content:     gitlab.String(content),
		Visibility:  gitlab.Visibility(gitlab.VisibilityValue(config.Conf.GitLab.Visibility)),
	}

	ret, _, err := g.Client.Snipplugins.CreateSnipplugin(opt)
	if err != nil {
		return -1, errors.Wrap(err, "Failed to create GitLab Snipplugin")
	}
	return ret.ID, nil
}

func (g GitLabClient) updateSnipplugin(ctx context.Context, content string) (err error) {
	s := spinner.New(spinner.CharSets[14], 100*time.Millisecond)
	s.Start()
	s.Suffix = " Updating GitLab Snipplugin..."
	defer s.Stop()

	opt := &gitlab.UpdateSnippluginOptions{
		Title:       gitlab.String("plugin-snipplugin"),
		FileName:    gitlab.String(config.Conf.GitLab.FileName),
		Description: gitlab.String("Snipplugin file generated by plugin"),
		Content:     gitlab.String(content),
		Visibility:  gitlab.Visibility(gitlab.VisibilityValue(config.Conf.GitLab.Visibility)),
	}

	_, _, err = g.Client.Snipplugins.UpdateSnipplugin(g.ID, opt)
	if err != nil {
		return errors.Wrap(err, "Failed to update GitLab Snipplugin")
	}
	return nil
}
